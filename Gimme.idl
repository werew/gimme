module Gimme
{
  struct GameInfos
  {
    boolean taketurns ;
    boolean running ;
  } ;

  struct Resource
  {
    string type;
    long amount;
  } ;

  struct Registration
  {
    boolean logged;
    string id;
    string msg;
  } ;


  /* Transactions are always stored by the receiver */
  struct Transaction
  {
    string id;
    long long timestamp;
    long type;        // Request | Query | Production
    string from;     
    Resource content; // If type = Query, this is the answer
                      // For failed requests the amount is 0
  } ;

  
  interface Agent
  {
    void logmsg(in string msg, in long type);
    oneway void start() ;
    boolean playTurn() ;
    Resource getResource(in Resource request) ;
    void syncEnd();
    oneway void endGame(in string results);
  } ; 


  interface Producer : Agent
  {
    Resource queryResource() ;
  } ;

  interface Consumer : Agent
  {
    typedef sequence<Producer> TabProd;
    typedef sequence<Consumer> TabCons;
    typedef sequence<string> TabIDs;
    typedef sequence<Resource> TabRes;

    void addObserver(in string id);
    void removeObserver(in string id);
    void seeTransaction(in string who, in Transaction t);

    void updateProducers(in TabProd producers, in TabIDs ids) ;
    void updateConsumers(in TabCons consumers, in TabIDs ids) ;
    void setGoal(in long goal, in TabIDs resources);

    TabRes getResult();
  } ;


  interface Coordinator
  {
    Registration loginConsumer(in Consumer c, in string id) ;
    Registration loginProducer(in Producer p, in string id, in string res) ;
    void addWinner(in string id);
    void addTermProd(in string id);
    GameInfos getGameInfos();
  } ;

} ;
